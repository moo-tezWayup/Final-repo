version: '3.8'

services:
  # Backend Spring Boot
  backend:
    build: ./back-end-main
    ports:
      - "8080:8080"
    depends_on:
      - db
      - keycloak
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: rahma123
      KEYCLOAK_AUTH_SERVER_URL: http://keycloak:8180
    networks:
      - clinic-management

  # Frontend Angular
  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    volumes:
      - ./front-end:/app
      - /app/node_modules
    ports:
      - "4200:4200"
    depends_on:
      - backend
      - keycloak
    networks:
      - clinic-management

  # Base de donn√©es PostgreSQL
  db:
    image: postgres:17
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: rahma123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - clinic-management

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: postgres
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: rahma123
    ports:
      - "8180:8080"
    depends_on:
      - db
    networks:
      - clinic-management

  # Jenkins
  jenkins:
    image: jenkins/jenkins:lts
    container_name: jenkins
    ports:
      - "8082:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
    networks:
      - clinic-management

  # SonarQube
  sonarqube:
    image: sonarqube:latest
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - clinic-management

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - clinic-management

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - clinic-management

volumes:
  postgres_data:
  jenkins_home:
  sonarqube_data:
  sonarqube_extensions:
  grafana_data:

networks:
  clinic-management:
    driver: bridge
